{"componentChunkName":"component---src-templates-blog-post-js","path":"/DataStructure/정렬/","result":{"data":{"site":{"siteMetadata":{"title":"DABI_devlog","author":"[DABIN SEO]","siteUrl":"https://Dabinnny.github.io","comment":{"disqusShortName":"","utterances":"Dabinnny/Dabinnny.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"24dc17ac-155e-5598-9ec5-e10afd5ffdae","excerpt":"…","html":"<h1 id=\"-정렬의-논리적인-개념은-모든-알고리즘의-기반이-된다\" style=\"position:relative;\"><a href=\"#-%EC%A0%95%EB%A0%AC%EC%9D%98-%EB%85%BC%EB%A6%AC%EC%A0%81%EC%9D%B8-%EA%B0%9C%EB%85%90%EC%9D%80-%EB%AA%A8%EB%93%A0-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%EA%B8%B0%EB%B0%98%EC%9D%B4-%EB%90%9C%EB%8B%A4\" aria-label=\" 정렬의 논리적인 개념은 모든 알고리즘의 기반이 된다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔮 정렬의 논리적인 개념은 모든 알고리즘의 기반이 된다.</h1>\n<p>정렬 왜 중요한가?<br>\n왜 중요한지 묻는다면 정렬이 없는 삶을 떠올려보자.  </p>\n<p>도서관을 갔는데 책이 뒤죽박죽 꽂혀있어 보고싶은 책을 찾을 수 없다?<br>\n오늘 중요한 메일을 받아서 회신해야하는데 맨 앞쪽으로 가버린다?<br>\n배달 시키려는데 거리순,인기순 카테고리가 없어졌.. 생각도 하기 싫다.  </p>\n<p><span style=\"color:red\"><strong>여튼 중요하다.</strong> </span> </p>\n<p>모든 데이터를 정렬할 수 있다면 우리가 찾고자하고, 보고자 하는 데이터를 검색하고 탐색하는데<br>\n효율적이고 빠르게 접근할 수 있을것이다.<br>\n여기서 시간복잡도라는 개념이 수반되지만 별도로 정리할 예정으로 지금은 정렬종류와 방법에 대해서만 살펴보자.</p>\n<h2 id=\"1-버블-정렬bubble-sort\" style=\"position:relative;\"><a href=\"#1-%EB%B2%84%EB%B8%94-%EC%A0%95%EB%A0%ACbubble-sort\" aria-label=\"1 버블 정렬bubble sort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 버블 정렬(Bubble Sort)</h2>\n<div align=\"center\">\n<img src=\"https://media.vlpt.us/images/hwamoc/post/4aec7cdc-5de7-4af5-89e8-15ed4ca9e549/%EB%B2%84%EB%B8%941.gif\" width=\"500\"></div>\n<br/>\n<ul>\n<li>인접한 두 수를 비교하면서 정렬한다.</li>\n<li>앞에서부터 시작해서 큰 수를 뒤로 보내 뒤가 가장 큰 값을 가지도록 정렬하거나, 반대로 반복해가는 방법이다.</li>\n<li>이미 정렬된 자료에서는 최고지만 그 외에는 최악의 성능을 나타내는 단점이 있다.</li>\n<li>시간 복잡도 : <code class=\"language-text\">O(n²)</code></li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">bubble_sort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before: \"</span><span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">)</span>\nbubble_sort<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after:\"</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\nbefore:  [8, 4, 6, 2, 9, 1, 3, 7, 5]\n[4, 6, 2, 8, 1, 3, 7, 5, 9]\n[4, 2, 6, 1, 3, 7, 5, 8, 9]\n[2, 4, 1, 3, 6, 5, 7, 8, 9]\n[2, 1, 3, 4, 5, 6, 7, 8, 9]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\nafter: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n'''</span></code></pre></div>\n<h2 id=\"2-선택-정렬selection-sort\" style=\"position:relative;\"><a href=\"#2-%EC%84%A0%ED%83%9D-%EC%A0%95%EB%A0%ACselection-sort\" aria-label=\"2 선택 정렬selection sort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 선택 정렬(Selection Sort)</h2>\n<div align=\"center\">\n<img src=\"https://media.vlpt.us/images/hwamoc/post/4adce14a-bb45-4c39-8253-ae5665991156/%EC%84%A0%ED%83%9D1.gif\" width=\"500\"> </div> \n<ul>\n<li>주어진 배열에서 최솟값(최댓값)을 찾아 맨 왼쪽(오른쪽)값과 교체한다.</li>\n<li>버블정렬과 비슷하지만, 인접한 두 값을 정렬하는 과정이 없기 때문에 버블정렬보다 보통 2배 정도 빠르다.</li>\n<li>시간복잡도 : <code class=\"language-text\">O(n²)</code></li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">selection_sort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tn <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tmin_index <span class=\"token operator\">=</span> i\n\t\t<span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">if</span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">[</span>min_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\t\t\t\tmin_index <span class=\"token operator\">=</span> j\n\t\tarray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>min_index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>  array<span class=\"token punctuation\">[</span>min_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before: \"</span><span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">)</span>\nselection_sort<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after:\"</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\nbefore:  [8, 4, 6, 2, 9, 1, 3, 7, 5]\n[1]\n[1, 2]\n[1, 2, 3]\n[1, 2, 3, 4]\n[1, 2, 3, 4, 5]\n[1, 2, 3, 4, 5, 6]\n[1, 2, 3, 4, 5, 6, 7]\n[1, 2, 3, 4, 5, 6, 7, 8]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\nafter: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n'''</span></code></pre></div>\n<h2 id=\"3-삽입정렬insert-sort\" style=\"position:relative;\"><a href=\"#3-%EC%82%BD%EC%9E%85%EC%A0%95%EB%A0%ACinsert-sort\" aria-label=\"3 삽입정렬insert sort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 삽입정렬(Insert sort)</h2>\n<div align=\"center\">\n<img src=\"https://media.vlpt.us/images/hwamoc/post/4baaa2bc-d48a-4f3b-a063-6538f6f59971/%EC%82%BD%EC%9E%851.gif\" width=\"600\"></div>\n<br/>\n<br/>\n<ul>\n<li>배열의 각각의 원소들을 앞에서부터 차례대로 이미 정렬된 부분 배열과 비교하여 자신보다 큰 값과 작은 값 사이의<br>\n위치를 찾아 삽입하여 정렬한다.  </li>\n<li>시간복잡도 최선일때 : <code class=\"language-text\">O(n)</code>, 최악일때 : <code class=\"language-text\">O(n^2)</code>  </li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">insertion_sort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tn <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">if</span> array<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\t\t\t\tarray<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before: \"</span><span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">)</span>\ninsertion_sort<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after:\"</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\nbefore:  [8, 4, 6, 2, 9, 1, 3, 7, 5]\n[4, 8]\n[4, 6, 8]\n[2, 4, 6, 8]\n[2, 4, 6, 8, 9]\n[1, 2, 4, 6, 8, 9]\n[1, 2, 3, 4, 6, 8, 9]\n[1, 2, 3, 4, 6, 7, 8, 9]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\nafter: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n'''</span></code></pre></div>\n<h2 id=\"4-병합정렬merge-sort\" style=\"position:relative;\"><a href=\"#4-%EB%B3%91%ED%95%A9%EC%A0%95%EB%A0%ACmerge-sort\" aria-label=\"4 병합정렬merge sort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 병합정렬(Merge sort)</h2>\n<div align=\"center\">\n<img src=\"https://user-images.githubusercontent.com/90162819/159205899-bf7640cd-9930-4bc3-95db-1c8b0393a0dc.gif\" width=\"500\"></div>\n<ul>\n<li>분할정복법이 사용되는데 각 값들을 리스트로 나누어 길이가 1이 될때까지 나눈다. </li>\n<li>다 쪼개지면 왼쪽의 0번 인덱스와 오른쪽의 0번 인덱스를 비교하여 적은 값을 먼저 병합하는데<br>\n이 방법을 계속 반복한다. (재귀)  </li>\n<li>시간복잡도 : <code class=\"language-text\">O(n log n)</code>  </li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> array\n\tmid <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n\tlow_arr <span class=\"token operator\">=</span> merge_sort<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\thigh_arr <span class=\"token operator\">=</span> merge_sort<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\tmerged_arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\tl <span class=\"token operator\">=</span> h <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">while</span> l <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>low_arr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> h <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>high_arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> low_arr<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> high_arr<span class=\"token punctuation\">[</span>h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\t\t\tmerged_arr<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>low_arr<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\tl <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t\tmerged_arr<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>high_arr<span class=\"token punctuation\">[</span>h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\th <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\tmerged_arr <span class=\"token operator\">+=</span> low_arr<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\tmerged_arr <span class=\"token operator\">+=</span> high_arr<span class=\"token punctuation\">[</span>h<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>merged_arr<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> merged_arr\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before: \"</span><span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">)</span>\narray <span class=\"token operator\">=</span> merge_sort<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after:\"</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\nbefore:  [8, 4, 6, 2, 9, 1, 3, 7, 5]\n[4, 8]\n[2, 6]\n[2, 4, 6, 8]\n[1, 9]\n[5, 7]\n[3, 5, 7]\n[1, 3, 5, 7, 9]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\nafter: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n'''</span></code></pre></div>\n<h2 id=\"5-퀵정렬quick-sort\" style=\"position:relative;\"><a href=\"#5-%ED%80%B5%EC%A0%95%EB%A0%ACquick-sort\" aria-label=\"5 퀵정렬quick sort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 퀵정렬(Quick sort)</h2>\n<div align=\"center\">\n<img src=\"https://user-images.githubusercontent.com/90162819/159205897-7a21198d-454d-4a32-b2af-f530f42a8969.gif\" width=\"500\"></div>\n<ul>\n<li>병합정렬과 마찬가지로 분할정복법을 사용한다.</li>\n<li>차이점은 분할단계에서 정렬을 하는데 전체에서 기준(pivot)이 되는 원소를 하나 정하고 기준을 중심으로<br>\n기준 왼쪽으로는 기준 보다 작은 값이 오게 정렬, 기준 오른쪽으로는 값이 큰 원소들이 오게 배치한다.</li>\n<li>기준을 중심으로 나누어진 왼쪽, 오른쪽 집단에서 각각 다시 기준이 되는 원소를 정해 위 과정을 반복한다.</li>\n<li>시간복잡도 : 최악 <code class=\"language-text\">O(n^2)</code>, 최선 <code class=\"language-text\">O(n log n)</code> </li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">quick_sort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> array\n\tpivot <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n\tfront_arr<span class=\"token punctuation\">,</span> pivot_arr<span class=\"token punctuation\">,</span> back_arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> array<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\t\t\tfront_arr<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">elif</span> value <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\t\t\tback_arr<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t\tpivot_arr<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>front_arr<span class=\"token punctuation\">,</span> pivot_arr<span class=\"token punctuation\">,</span> back_arr<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> quick_sort<span class=\"token punctuation\">(</span>front_arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> quick_sort<span class=\"token punctuation\">(</span>pivot_arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> quick_sort<span class=\"token punctuation\">(</span>back_arr<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before: \"</span><span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">)</span>\narray <span class=\"token operator\">=</span> quick_sort<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after:\"</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\nbefore:  [8, 4, 6, 2, 5, 1, 3, 7, 9]\n[4, 2, 1, 3] [5] [8, 6, 7, 9]\n[] [1] [4, 2, 3]\n[] [2] [4, 3]\n[] [3] [4]\n[6] [7] [8, 9]\n[8] [9] []\nafter: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n'''</span></code></pre></div>","frontmatter":{"title":"정렬알고리즘 구현(Bubble, Selection, Insertion, Merge, Quick)","date":"January 18, 2022"}}},"pageContext":{"slug":"/DataStructure/정렬/","previous":{"fields":{"slug":"/OpenCV/데이터속성/"},"frontmatter":{"title":"Image 속성값, 생성, 복사, 부분추출, 합치기"}},"next":{"fields":{"slug":"/DataStructure/dp/"},"frontmatter":{"title":"동적계획법 DP (Dynamic Programming) 구현"}}}},"staticQueryHashes":["3128451518","635777304"]}