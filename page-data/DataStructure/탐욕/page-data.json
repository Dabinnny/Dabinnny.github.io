{"componentChunkName":"component---src-templates-blog-post-js","path":"/DataStructure/탐욕/","result":{"data":{"site":{"siteMetadata":{"title":"DABI_devlog","author":"[DABIN SEO]","siteUrl":"https://Dabinnny.github.io","comment":{"disqusShortName":"","utterances":"Dabinnny/Dabinnny.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"eecc19ff-7460-5984-a566-7ba1de2df546","excerpt":"1. 탐욕 알고리즘(Greedy Algorithm) 이란? 여러 경우 중 하나를 결정해야 할 때마다, 매순간 최적이라고 생각되는 경우를 선택하며 값을 구하는 방식   하지만 매순간 최적의 값이 전체의 최적의 값과 다를 수도 있기 때문에, 이 자체가 항상 전체의 최적의 값을 보장하지는 못하는 한계가 있음   따라서, 탐욕 알고리즘은 반드시 최적의 해를 구할 수 있는 것은 아니기 때문에 근사치 추정에 활용   위와 같은 경우  ‘시작’ 노드에서 가장 작은 값을 찾아 leaf node…","html":"<h2 id=\"1-탐욕-알고리즘greedy-algorithm-이란\" style=\"position:relative;\"><a href=\"#1-%ED%83%90%EC%9A%95-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98greedy-algorithm-%EC%9D%B4%EB%9E%80\" aria-label=\"1 탐욕 알고리즘greedy algorithm 이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 탐욕 알고리즘(Greedy Algorithm) 이란?</h2>\n<ul>\n<li>여러 경우 중 하나를 결정해야 할 때마다, <strong>매순간 최적이라고 생각되는 경우를 선택</strong>하며 값을 구하는 방식  </li>\n<li>하지만 매순간 최적의 값이 전체의 최적의 값과 다를 수도 있기 때문에, 이 자체가 항상 전체의 최적의 값을 보장하지는 못하는 한계가 있음  </li>\n<li>따라서, 탐욕 알고리즘은 반드시 최적의 해를 구할 수 있는 것은 아니기 때문에 근사치 추정에 활용  </li>\n</ul>\n<div align=\"center\"><img src=\"https://user-images.githubusercontent.com/90162819/166667901-03e8a2f2-c4f9-456b-bf23-ae75e454d43f.png\" width=\"450\"> </div>  \n<p>위와 같은 경우  ‘시작’ 노드에서 가장 작은 값을 찾아 leaf node까지 가는 경로를 찾을 시에<br>\n탐욕 알고리즘의 경우 <strong>시작 -> 7 -> 12</strong> 를 선택하게 되므로 <strong>7 + 12 = 19</strong> 가 된다.<br>\n하지만, 실제 가장 작은 값은 <strong>시작 -> 10 -> 5</strong> 이며, <strong>10 + 5 = 15</strong> 가 답인 경우다. </p>\n<br/>\n<h2 id=\"2-탐욕-알고리즘-예제\" style=\"position:relative;\"><a href=\"#2-%ED%83%90%EC%9A%95-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%98%88%EC%A0%9C\" aria-label=\"2 탐욕 알고리즘 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 탐욕 알고리즘 예제</h2>\n<h3 id=\"1-동전-문제----백준-11047\" style=\"position:relative;\"><a href=\"#1-%EB%8F%99%EC%A0%84-%EB%AC%B8%EC%A0%9C----%EB%B0%B1%EC%A4%80-11047\" aria-label=\"1 동전 문제    백준 11047 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 동전 문제  - 백준 [11047]</h3>\n<br/>\n<div align=\"center\"><img src=\"https://user-images.githubusercontent.com/90162819/166668471-f8f65e3e-6d49-4c49-bb4c-8a9d3073ca6b.png\"> </div> \n<div align=\"center\"><img src=\"https://user-images.githubusercontent.com/90162819/166668495-826868ad-c85c-4b47-8ace-c42bef52eade.png\"> </div> \n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">N<span class=\"token punctuation\">,</span> K <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\ncoin_list<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    coin_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \ncoin_list<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 값이 큰 동전부터 계산해야 최소 갯수가 되므로 내림차순 정렬 </span>\ncoin_total_num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">for</span> coin <span class=\"token keyword\">in</span> coin_list<span class=\"token punctuation\">:</span>\n    coin_total_num <span class=\"token operator\">+=</span> K <span class=\"token operator\">//</span> coin   <span class=\"token comment\"># 값이 큰 동전부터 나눠서 몫을 구함(몫=동전갯수)</span>\n    K <span class=\"token operator\">%=</span> coin   <span class=\"token comment\"># 구하고자 하는 금액에서 값만큼 차감(나머지)</span>\n    \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>coin_total_num<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<br/>\n<h3 id=\"2-부분-배낭-문제\" style=\"position:relative;\"><a href=\"#2-%EB%B6%80%EB%B6%84-%EB%B0%B0%EB%82%AD-%EB%AC%B8%EC%A0%9C\" aria-label=\"2 부분 배낭 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 부분 배낭 문제</h3>\n<br/>\n<p>무게 제한이 k인 베낭에 최대 가치를 가지도록 물건을 넣는 문제<br>\n각 물건은 무게(w)와 가치(v)로 표현되며, 물건은 쪼갤 수 있으므로 물건의 일부분이 배낭에 넣어질 수 있음<br>\n그래서 Fractional Knapsack Problem 으로 부름  </p>\n<br/>\n<br/>\n<div align=\"center\"><img src=\"https://user-images.githubusercontent.com/90162819/166669165-a2b57121-239e-43d4-988d-83dec048fc0f.png\"> </div> \n<br/>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">data_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_max_value</span><span class=\"token punctuation\">(</span>data_list<span class=\"token punctuation\">,</span> capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># capacity 무게제한 k 값</span>\n    data_list <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>data_list<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    total_value <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    details <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">for</span> data <span class=\"token keyword\">in</span> data_list<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> capacity <span class=\"token operator\">-</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 가치가 제일 높은 물건부터 쪼개지 않는 경우 다 넣어줌</span>\n            capacity <span class=\"token operator\">-=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            total_value <span class=\"token operator\">+=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            details<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 마지막 1은 물건을 몇 % 넣었는가? 쪼개서 넣을 수 있기때문에</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            fraction <span class=\"token operator\">=</span> capacity <span class=\"token operator\">/</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            total_value <span class=\"token operator\">+=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> fraction\n            details<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fraction<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">return</span> total_value<span class=\"token punctuation\">,</span> details\n\nget_max_value<span class=\"token punctuation\">(</span>data_list<span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># (24.5, [[10, 10, 1], [15, 12, 1], [20, 10, 0.25]])</span></code></pre></div>\n<br/>  \n<br/>\n<br/>  \n<br/>\n<blockquote>\n<p>이 글은 패스트캠퍼스 알고리즘 강의를 참고하였습니다.</p>\n</blockquote>","frontmatter":{"title":"탐욕(Greedy)알고리즘 이해","date":"April 22, 2022"}}},"pageContext":{"slug":"/DataStructure/탐욕/","previous":{"fields":{"slug":"/DataStructure/백트래킹/"},"frontmatter":{"title":"백트래킹(Backtracking) 이해하기"}},"next":null}},"staticQueryHashes":["3128451518","635777304"]}