{"componentChunkName":"component---src-templates-blog-post-js","path":"/DataStructure/탐색/","result":{"data":{"site":{"siteMetadata":{"title":"DABI_devlog","author":"[DABIN SEO]","siteUrl":"https://Dabinnny.github.io","comment":{"disqusShortName":"","utterances":"Dabinnny/Dabinnny.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"2d74b8f2-fa13-5a3e-9e66-23fecac7e5c2","excerpt":"🔍 탐색하고 최단거리를 찾자. 트리구조는 배열이나 스택,큐 등의 자료구조처럼 직관적으로 살펴보기 어렵다. 이때는 트리 순회 알고리즘인 DFS(Depth First Search,깊이우선탐색) 방법과 BFS(Breadth First Search, 너비우선탐색) 방법을 사용할 수 있다.  각 종류에 대해서 자세히 알아보자. 1. DFS(Depth First Search, 깊이우선탐색) DFS…","html":"<h1 id=\"-탐색하고-최단거리를-찾자\" style=\"position:relative;\"><a href=\"#-%ED%83%90%EC%83%89%ED%95%98%EA%B3%A0-%EC%B5%9C%EB%8B%A8%EA%B1%B0%EB%A6%AC%EB%A5%BC-%EC%B0%BE%EC%9E%90\" aria-label=\" 탐색하고 최단거리를 찾자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔍 탐색하고 최단거리를 찾자.</h1>\n<br/>\n<p>트리구조는 배열이나 스택,큐 등의 자료구조처럼 직관적으로 살펴보기 어렵다.<br>\n이때는 트리 순회 알고리즘인 DFS(Depth First Search,깊이우선탐색) 방법과 BFS(Breadth First Search, 너비우선탐색)<br>\n방법을 사용할 수 있다.  각 종류에 대해서 자세히 알아보자.</p>\n<h2 id=\"1-dfsdepth-first-search-깊이우선탐색\" style=\"position:relative;\"><a href=\"#1-dfsdepth-first-search-%EA%B9%8A%EC%9D%B4%EC%9A%B0%EC%84%A0%ED%83%90%EC%83%89\" aria-label=\"1 dfsdepth first search 깊이우선탐색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. DFS(Depth First Search, 깊이우선탐색)</h2>\n<div align=\"center\"><img src=\"https://user-images.githubusercontent.com/90162819/159219013-ecd04bd7-8264-4faf-8541-7c53d209c9fa.png\" width=\"400\"> </div>\n<br/>\n<ul>\n<li>DFS는 그래프의 구조에서 깊은 부분을 우선적으로 탐색하는 알고리즘이다.</li>\n<li>즉, 가장 위에 있는 부모노드부터 시작해 각 자식 노드의 끝까지 방문하고, 다음 자식 노드들을 방문하는 식으로 탐색을 한다.</li>\n<li>‘앞으로 방문할 노드’와 ‘이미 방문한 노드’를 기준으로 탐색을 진행한다.</li>\n<li>stack,재귀,deque 의 개념으로 구현할 수 있다.</li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># stack으로 구현</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">DFS</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> start_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    need_visited<span class=\"token punctuation\">,</span> visited <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    need_visited<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>start_node<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">while</span> need_visited<span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> need_visited<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> node <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> visited<span class=\"token punctuation\">:</span>\n            visited<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n            need_visited<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> visited\n\n<span class=\"token comment\"># 재귀로 구현</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">DFS_recursive</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> start_node<span class=\"token punctuation\">,</span> visited<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    visited<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>start_node<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">[</span>start_node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> node <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> visited<span class=\"token punctuation\">:</span>\n            DFS_recursive<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> visited\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\n    graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             <span class=\"token number\">4</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             <span class=\"token number\">5</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             <span class=\"token number\">6</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n             <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>DFS<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>             <span class=\"token comment\">#[0, 2, 6, 5, 1, 4, 3]  </span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>DFS_recursive<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">#[0, 1, 3, 4, 2, 5, 6]</span></code></pre></div>\n<br/>\n<ul>\n<li>stack과 재귀는 왼쪽부터 탐색하는지 오른쪽부터 탐색하는지에 따라 값이 다르지만 어느쪽부터 탐색하던 방향은 상관없다.</li>\n<li>방향을 맞춰주고 싶다면 stack구조에서 <code class=\"language-text\">need_visited.extend(reversed(graph[node]))</code>로 순회할 노드 리스트를<br>\n반대로 뒤집어 주면 된다.</li>\n</ul>\n<h2 id=\"2-bfsbreadth-first-search-너비우선탐색\" style=\"position:relative;\"><a href=\"#2-bfsbreadth-first-search-%EB%84%88%EB%B9%84%EC%9A%B0%EC%84%A0%ED%83%90%EC%83%89\" aria-label=\"2 bfsbreadth first search 너비우선탐색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. BFS(Breadth First Search, 너비우선탐색)</h2>\n<div align=\"center\"><img src=\"https://user-images.githubusercontent.com/90162819/159219002-cd9b5614-ae45-40af-8e07-fa6540c788ad.png\" width=\"400\"> </div>\n<br/>\n<ul>\n<li>BFS는 그래프의 구조에서 수평방향으로 탐색하는 알고리즘이다.</li>\n<li>최단거리를 구하는 문제를 풀때 효율적이다.</li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">BFS</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> start_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n    visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    need_visited <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    need_visited<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>start_node<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">while</span> need_visited<span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> need_visited<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> node <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> visited<span class=\"token punctuation\">:</span>\n            visited<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n            need_visited<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> visited\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\n    graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             <span class=\"token number\">4</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             <span class=\"token number\">5</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             <span class=\"token number\">6</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n             <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>BFS<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>             <span class=\"token comment\">#[0, 1, 2, 3, 4, 5, 6]</span></code></pre></div>\n<br/>\n<br/>\n<br/>\n<p>코드들은 별로 어렵지 않지만, 직관적으로 탐색 흐름이 잘 와닿진 않는다.<br>\n조금 오래된 영상이긴 하지만 <a href=\"https://www.youtube.com/watch?v=BLc3wzvycH8&#x26;t=91s\">허민석님의 설명영상</a>이 전체적인 흐름을 이해하는데 제일 도움이 되었다.</p>","frontmatter":{"title":"DFS와 BFS 탐색 구현하기","date":"January 27, 2022"}}},"pageContext":{"slug":"/DataStructure/탐색/","previous":{"fields":{"slug":"/DataStructure/dp/"},"frontmatter":{"title":"동적계획법 DP (Dynamic Programming) 구현"}},"next":{"fields":{"slug":"/논문 읽기/StarGANv2/"},"frontmatter":{"title":"[논문리뷰] StarGAN v2"}}}},"staticQueryHashes":["2486386679","3128451518"]}