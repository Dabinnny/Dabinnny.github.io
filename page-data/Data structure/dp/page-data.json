{"componentChunkName":"component---src-templates-blog-post-js","path":"/Data Structure/dp/","result":{"data":{"site":{"siteMetadata":{"title":"DABI_devlog","author":"[DABIN SEO]","siteUrl":"https://Dabinnny.github.io","comment":{"disqusShortName":"","utterances":"Dabinnny/Dabinnny.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"a3f861ad-4e2c-5a85-ac50-bbe6fb25beee","excerpt":"🌿 문제의 일부분을 풀고 그 결과를 재활용하자. 동적계획법 이란? 하나의 문제를 중복되는 소문제로 분할하여 문제를 해결하는 방법이다. 피보나치 수열로 예를 들어보자. 피보나치의 점화식은 아래와 같다. 1,1,2,3,5,8… 이렇게 1,2번째는 1,2로 고정이고 3번째부터는 (n-2)+(n-1)로 구해지는  수열이다.   이 피보나치 수열을 트리형태로 분해해서 살펴보면, 위와 같이 F(n-3)의 연산이 반복된다. 이때 반복되는 F(n-…","html":"<h1 id=\"-문제의-일부분을-풀고-그-결과를-재활용하자\" style=\"position:relative;\"><a href=\"#-%EB%AC%B8%EC%A0%9C%EC%9D%98-%EC%9D%BC%EB%B6%80%EB%B6%84%EC%9D%84-%ED%92%80%EA%B3%A0-%EA%B7%B8-%EA%B2%B0%EA%B3%BC%EB%A5%BC-%EC%9E%AC%ED%99%9C%EC%9A%A9%ED%95%98%EC%9E%90\" aria-label=\" 문제의 일부분을 풀고 그 결과를 재활용하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌿 문제의 일부분을 풀고 그 결과를 재활용하자.</h1>\n<h2 id=\"동적계획법-이란\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%A0%81%EA%B3%84%ED%9A%8D%EB%B2%95-%EC%9D%B4%EB%9E%80\" aria-label=\"동적계획법 이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동적계획법 이란?</h2>\n<ul>\n<li><span style=\"background-color:#fff5b1\">하나의 문제를 중복되는 소문제로 분할하여 문제를 해결하는 방법이다.</span></li>\n<li>피보나치 수열로 예를 들어보자.</li>\n</ul>\n<br/>\n<p>피보나치의 점화식은 아래와 같다. 1,1,2,3,5,8… 이렇게 1,2번째는 1,2로 고정이고 3번째부터는 (n-2)+(n-1)로 구해지는<br>\n수열이다.  </p>\n<div align=\"center\"><img src=\"https://media.vlpt.us/images/bonjaski0989/post/d2fcb2b2-0a42-40ed-b8f7-cf6372b1a378/image.png\" width=\"500\"> </div>\n<br/>\n<p>이 피보나치 수열을 트리형태로 분해해서 살펴보면, 위와 같이 F(n-3)의 연산이 반복된다.<br>\n이때 반복되는 F(n-3)의 값을 매번 구하지 않고 따로 저장해놓고 사용함으로써 빠른속도로 최적의 값을 찾을 수 있다.\n<br/><br>\n다음으로 DP의 2가지 방법에 대해서 알아보자.</p>\n<h2 id=\"memoization-top-down-하향식-방법\" style=\"position:relative;\"><a href=\"#memoization-top-down-%ED%95%98%ED%96%A5%EC%8B%9D-%EB%B0%A9%EB%B2%95\" aria-label=\"memoization top down 하향식 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Memoization (Top-Down, 하향식) 방법</h2>\n<ul>\n<li>하위 문제에 대한 정답을 계산했는지 확인해가며 이전에 계산한 값을 메모리에 저장해두고 사용하는 방법이다.</li>\n<li>이 방법은 재귀방식보다 효율적이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 재귀</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"연산\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">elif</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> \n        <span class=\"token keyword\">return</span> fibonacci<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fibonacci<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">fibonacci(5)\n연산\n연산\n연산\n연산\n연산\n연산\n연산\n연산\n연산\n연산\n연산\n연산\n연산\n연산\n연산\n5</code></pre></div>\n<p>재귀의 경우 fibonacci(5)의 값을 구하기 위해서는 함수가 <code class=\"language-text\">15번</code>이 호출된다.<br>\n이때 fibonacci(4)의 값을 구하기 위해서는 fibonacci(3)과 fibonacci(2)의 값을 알아야하고 계속해서 연산이 반복된다.<br>\n즉, 연산과정에서 비효율적으로 함수가 많이 호출된다는 것이다. 이 경우 시간초과를 유발할 수 있다.</p>\n  <br/>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># memoization</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"연산\"</span><span class=\"token punctuation\">)</span>\n  fibo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>                           <span class=\"token comment\">#배열의 값을 저장하는 리스트 생성</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    fibo<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>fibo<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> fibo<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># i번째 수열을 계산하여 배열에 추가</span>\n  <span class=\"token keyword\">return</span> fibo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> </code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">fibonacci(5)\n연산\n5</code></pre></div>\n<p>Memoization의 경우는 연산이 1번만 실행된다.<br>\nn이 2 이상일때부터 연산의 결과를 fibo 리스트에 저장하기 때문에 연산을 중복해수 수행하지 않는 것이다.</p>\n <br/>\n <br/>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n\nstart <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \nanswer <span class=\"token operator\">=</span> fibonacci<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nend <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'시간:'</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span></code></pre></div>\n<p>두가지 방법의 실행 시간은 위 코드로 비교해 볼 수 있다.</p>\n<h2 id=\"tabulation-bottom-up-상향식\" style=\"position:relative;\"><a href=\"#tabulation-bottom-up-%EC%83%81%ED%96%A5%EC%8B%9D\" aria-label=\"tabulation bottom up 상향식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tabulation (Bottom-up, 상향식)</h2>\n<ul>\n<li>반복문의 점화식을을 이용해서 하위문제에서부터 문제를 해결하는 방법이다.</li>\n<li>DP의 전형적인 형태이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"연산\"</span><span class=\"token punctuation\">)</span>   \n   fibo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>                                 <span class=\"token comment\"># 0번째, 1번째, 2번째 값을 먼저 설정    </span>\n   <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n       fibonacci<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>fibo<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> fibo<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#점화식으로 리스트 채움</span>\n   <span class=\"token keyword\">return</span> fibo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">fibonacci(5)\n연산\n5</code></pre></div>","frontmatter":{"title":"동적계획법 DP (Dynamic Programming)","date":"February 24, 2022"}}},"pageContext":{"slug":"/Data Structure/dp/","previous":{"fields":{"slug":"/Data Structure/정렬/"},"frontmatter":{"title":"정렬알고리즘 정리(Bubble, Selection, Insertion, Merge, Quick)"}},"next":{"fields":{"slug":"/논문뽀개기/StarGANv2/"},"frontmatter":{"title":"[논문리뷰] StarGAN v2"}}}},"staticQueryHashes":["2486386679","3128451518"]}